name: WeRead to Flomo Sync

on:
  # 定时任务：每天北京时间 20:30 运行
  schedule:
    - cron: '30 12 * * *'  # UTC 12:30 = 北京时间 20:30
    
  # 更多时间选项（取消注释即可使用）：
  # - cron: '0 0,12 * * *'     # 每天 2 次（北京时间 08:00 和 20:00）
  # - cron: '0 */6 * * *'      # 每 6 小时一次
  # - cron: '0 22 * * *'       # 每天早上 6:00（北京时间）
  # - cron: '0 0 * * 1'        # 每周一早上 8:00（北京时间）
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      days_limit:
        description: '只同步最近几天的划线（留空使用配置文件默认值）'
        required: false
        default: ''
      max_highlights:
        description: '最多同步几条划线（留空使用配置文件默认值）'
        required: false
        default: ''

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 允许写入仓库内容
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 配置环境变量
      run: |
        # 创建 .env 文件（只写入非空的配置项）
        touch .env
        
        # Cookie Cloud 配置（推荐）
        if [ -n "${{ secrets.CC_URL }}" ]; then
          echo 'CC_URL="${{ secrets.CC_URL }}"' >> .env
        fi
        if [ -n "${{ secrets.CC_ID }}" ]; then
          echo 'CC_ID="${{ secrets.CC_ID }}"' >> .env
        fi
        if [ -n "${{ secrets.CC_PASSWORD }}" ]; then
          echo 'CC_PASSWORD="${{ secrets.CC_PASSWORD }}"' >> .env
        fi
        
        # 备用 Cookie（如果 Cookie Cloud 失败）
        if [ -n "${{ secrets.WEREAD_COOKIE }}" ]; then
          echo 'WEREAD_COOKIE="${{ secrets.WEREAD_COOKIE }}"' >> .env
        fi
        
        # Flomo API（必需）
        if [ -n "${{ secrets.FLOMO_API }}" ]; then
          echo 'FLOMO_API="${{ secrets.FLOMO_API }}"' >> .env
        fi
        
        # AI 配置（可选）
        if [ -n "${{ secrets.AI_API_KEY }}" ]; then
          echo 'AI_API_KEY="${{ secrets.AI_API_KEY }}"' >> .env
        fi
        if [ -n "${{ secrets.AI_API_BASE }}" ]; then
          echo 'AI_API_BASE="${{ secrets.AI_API_BASE }}"' >> .env
        fi
        if [ -n "${{ secrets.AI_MODEL }}" ]; then
          echo 'AI_MODEL="${{ secrets.AI_MODEL }}"' >> .env
        fi
        
        # 同步配置（使用输入参数或 secrets，优先使用输入参数）
        DAYS_LIMIT="${{ github.event.inputs.days_limit }}"
        if [ -z "$DAYS_LIMIT" ] && [ -n "${{ secrets.SYNC_DAYS_LIMIT }}" ]; then
          DAYS_LIMIT="${{ secrets.SYNC_DAYS_LIMIT }}"
        fi
        if [ -n "$DAYS_LIMIT" ]; then
          echo "SYNC_DAYS_LIMIT=$DAYS_LIMIT" >> .env
        fi
        
        MAX_HIGHLIGHTS="${{ github.event.inputs.max_highlights }}"
        if [ -z "$MAX_HIGHLIGHTS" ] && [ -n "${{ secrets.SYNC_MAX_HIGHLIGHTS }}" ]; then
          MAX_HIGHLIGHTS="${{ secrets.SYNC_MAX_HIGHLIGHTS }}"
        fi
        if [ -n "$MAX_HIGHLIGHTS" ]; then
          echo "SYNC_MAX_HIGHLIGHTS=$MAX_HIGHLIGHTS" >> .env
        fi
        
        echo "✅ 环境变量配置完成"
        
    - name: 运行同步
      run: |
        echo "🚀 开始同步..."
        echo "⏰ 运行时间: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
        echo ""
        
        # 运行同步并捕获输出
        python sync.py 2>&1 | tee sync.log
        
        # 检查是否成功
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo ""
          echo "✅ 同步成功完成！"
        else
          echo ""
          echo "❌ 同步失败，请查看日志"
          exit 1
        fi
        
    - name: 上传同步记录和日志
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sync-records-${{ github.run_number }}
        path: |
          synced_bookmarks.json
          sync.log
        retention-days: 30
        
    - name: 提交同步记录
      if: success()
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add synced_bookmarks.json
        git diff --quiet && git diff --staged --quiet || (git commit -m "chore: update sync records [skip ci]" && git push)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 生成同步摘要
      if: always()
      run: |
        echo "# 📊 WeRead2Flomo 同步任务报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 基本信息
        echo "## 📅 基本信息" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "| 运行时间 | $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S') |" >> $GITHUB_STEP_SUMMARY
        echo "| 触发方式 | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow Run | [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 提取配置信息
        if [ -f sync.log ]; then
          echo "## ⚙️ 配置详情" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 提取配置信息部分
          if grep -q "⚙️  配置信息" sync.log; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            sed -n '/⚙️  配置信息/,/开始同步微信读书划线到 flomo/p' sync.log | head -n -2 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 提取同步结果统计
          echo "## 📈 同步结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if grep -q "✅ 同步完成!" sync.log; then
            # 基本统计
            echo "### 📊 基本统计" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 指标 | 数值 | 说明 |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
            
            PROCESSED_BOOKS=$(grep -A 1 "📊 基本统计:" sync.log | grep "处理书籍:" | sed -E 's/.*处理书籍: ([0-9]+)\/([0-9]+).*/\1/')
            TOTAL_BOOKS=$(grep -A 1 "📊 基本统计:" sync.log | grep "处理书籍:" | sed -E 's/.*处理书籍: ([0-9]+)\/([0-9]+).*/\2/')
            NEW_SYNCED=$(grep "本次新同步:" sync.log | tail -1 | sed -E 's/.*本次新同步: ([0-9]+).*/\1/')
            TOTAL_SYNCED=$(grep "累计已同步:" sync.log | tail -1 | sed -E 's/.*累计已同步: ([0-9]+).*/\1/')
            FAILED=$(grep "失败数量:" sync.log | tail -1 | sed -E 's/.*失败数量: ([0-9]+).*/\1/')
            
            echo "| 📚 处理书籍 | ${PROCESSED_BOOKS:-0}/${TOTAL_BOOKS:-0} | 本次处理的书籍数量 |" >> $GITHUB_STEP_SUMMARY
            echo "| ✨ 新增划线 | ${NEW_SYNCED:-0} 条 | 本次新同步的划线 |" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 累计划线 | ${TOTAL_SYNCED:-0} 条 | 历史累计同步数量 |" >> $GITHUB_STEP_SUMMARY
            if [ "${FAILED:-0}" -gt 0 ]; then
              echo "| ❌ 失败数量 | ${FAILED:-0} 条 | 发送失败的划线 |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # 性能指标
            if grep -q "⏱️  性能指标:" sync.log; then
              echo "### ⏱️  性能指标" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| 指标 | 数值 |" >> $GITHUB_STEP_SUMMARY
              echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
              
              DURATION=$(grep "同步耗时:" sync.log | tail -1 | sed -E 's/.*同步耗时: ([0-9.]+) 秒.*/\1/')
              SPEED=$(grep "平均速度:" sync.log | tail -1 | sed -E 's/.*平均速度: ([0-9.]+) 条.*/\1/')
              AVG_TIME=$(grep "平均耗时:" sync.log | tail -1 | sed -E 's/.*平均耗时: ([0-9.]+) 秒.*/\1/')
              
              if [ -n "$DURATION" ]; then
                DURATION_MIN=$(awk "BEGIN {printf \"%.1f\", $DURATION/60}")
                echo "| ⏰ 同步耗时 | ${DURATION}秒 (${DURATION_MIN}分钟) |" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "$SPEED" ]; then
                echo "| 🚀 平均速度 | ${SPEED} 条/分钟 |" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "$AVG_TIME" ]; then
                echo "| ⏳ 平均耗时 | ${AVG_TIME} 秒/条 |" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Flomo API 使用情况
            echo "### 📤 Flomo API 使用情况" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 指标 | 数值 |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            
            API_CALLS=$(grep "API 调用:" sync.log | tail -1 | sed -E 's/.*API 调用: ([0-9]+)\/([0-9]+).*/\1/')
            API_LIMIT=$(grep "API 调用:" sync.log | tail -1 | sed -E 's/.*API 调用: ([0-9]+)\/([0-9]+).*/\2/')
            API_USAGE=$(grep "使用率:" sync.log | tail -1 | sed -E 's/.*使用率: ([0-9.]+)%.*/\1/')
            API_REMAINING=$(grep "剩余配额:" sync.log | tail -1 | sed -E 's/.*剩余配额: ([0-9]+).*/\1/')
            
            echo "| 🔗 API 调用 | ${API_CALLS:-0}/${API_LIMIT:-100} 次 |" >> $GITHUB_STEP_SUMMARY
            if [ -n "$API_USAGE" ]; then
              echo "| 📈 使用率 | ${API_USAGE}% |" >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "$API_REMAINING" ]; then
              echo "| 💰 剩余配额 | ${API_REMAINING} 次 |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # AI 功能统计
            if grep -q "🤖 AI 功能统计:" sync.log; then
              echo "### 🤖 AI 功能统计" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              if grep -q "AI 摘要:" sync.log; then
                SUMMARY_ATTEMPTED=$(grep -A 3 "AI 摘要:" sync.log | grep "尝试:" | sed -E 's/.*尝试: ([0-9]+).*/\1/')
                SUMMARY_SUCCESS=$(grep -A 3 "AI 摘要:" sync.log | grep "成功:" | sed -E 's/.*成功: ([0-9]+).*/\1/')
                SUMMARY_RATE=$(grep -A 3 "AI 摘要:" sync.log | grep "成功率:" | sed -E 's/.*成功率: ([0-9.]+)%.*/\1/')
                
                echo "**AI 摘要:**" >> $GITHUB_STEP_SUMMARY
                echo "- 尝试: ${SUMMARY_ATTEMPTED:-0} 次" >> $GITHUB_STEP_SUMMARY
                echo "- 成功: ${SUMMARY_SUCCESS:-0} 次" >> $GITHUB_STEP_SUMMARY
                echo "- 成功率: ${SUMMARY_RATE:-0}%" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
              
              if grep -q "AI 标签:" sync.log; then
                TAGS_ATTEMPTED=$(grep -A 3 "AI 标签:" sync.log | grep "尝试:" | sed -E 's/.*尝试: ([0-9]+).*/\1/')
                TAGS_SUCCESS=$(grep -A 3 "AI 标签:" sync.log | grep "成功:" | sed -E 's/.*成功: ([0-9]+).*/\1/')
                TAGS_RATE=$(grep -A 3 "AI 标签:" sync.log | grep "成功率:" | sed -E 's/.*成功率: ([0-9.]+)%.*/\1/')
                
                echo "**AI 标签:**" >> $GITHUB_STEP_SUMMARY
                echo "- 尝试: ${TAGS_ATTEMPTED:-0} 次" >> $GITHUB_STEP_SUMMARY
                echo "- 成功: ${TAGS_SUCCESS:-0} 次" >> $GITHUB_STEP_SUMMARY
                echo "- 成功率: ${TAGS_RATE:-0}%" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # 书籍处理详情
            if grep -q "📚 书籍处理详情:" sync.log; then
              echo "### 📚 书籍处理详情" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              sed -n '/📚 书籍处理详情:/,/^$/p' sync.log | grep "《" | head -10 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # 错误和警告
            if grep -q "❌ 错误" sync.log || grep -q "⚠️  警告" sync.log; then
              echo "### ⚠️  错误和警告" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              if grep -q "❌ 错误" sync.log; then
                ERROR_COUNT=$(grep "❌ 错误" sync.log | sed -E 's/.*❌ 错误 \(([0-9]+)\).*/\1/')
                echo "**错误 (${ERROR_COUNT:-0}):**" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                sed -n '/❌ 错误/,/^$/p' sync.log | grep "   -" | head -5 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
              
              if grep -q "⚠️  警告" sync.log; then
                WARNING_COUNT=$(grep "⚠️  警告" sync.log | sed -E 's/.*⚠️  警告 \(([0-9]+)\).*/\1/')
                echo "**警告 (${WARNING_COUNT:-0}):**" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                sed -n '/⚠️  警告/,/^$/p' sync.log | grep "   -" | head -5 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # 建议
            if grep -q "💡 建议:" sync.log; then
              echo "### 💡 建议" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              sed -n '/💡 建议:/,/^==/p' sync.log | grep "   -" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            echo "❌ 同步失败，请查看详细日志" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 详细日志（最后30行）
          echo "## 📝 详细日志" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>点击展开查看完整日志（最后30行）</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -30 sync.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ 未找到日志文件" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*由 [WeRead2Flomo](https://github.com/${{ github.repository }}) 自动生成*" >> $GITHUB_STEP_SUMMARY
        
    - name: 创建失败通知 Issue
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let logContent = '日志文件不存在';
          
          if (fs.existsSync('sync.log')) {
            logContent = fs.readFileSync('sync.log', 'utf8');
            // 限制日志长度，避免 Issue 过大
            if (logContent.length > 10000) {
              logContent = logContent.substring(logContent.length - 10000);
              logContent = '...(日志已截断)\n\n' + logContent;
            }
          }
          
          const title = `🚨 定时同步失败 - ${new Date().toISOString().split('T')[0]}`;
          const body = `## 同步任务失败
          
          **时间**: ${new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' })}
          **Workflow Run**: [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ### 错误日志
          
          \`\`\`
          ${logContent}
          \`\`\`
          
          ### 可能的原因
          
          1. Cookie 已过期，需要更新
          2. Flomo API 达到限制
          3. 网络连接问题
          4. 配置错误
          
          ### 解决方案
          
          1. 检查 GitHub Secrets 配置
          2. 手动触发一次测试：Actions → WeRead to Flomo Sync → Run workflow
          3. 查看完整日志：[点击这里](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ---
          *此 Issue 由 GitHub Actions 自动创建*`;
          
          // 检查是否已有今天的失败 Issue
          const today = new Date().toISOString().split('T')[0];
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'auto-sync-failure',
            per_page: 5
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes(today)
          );
          
          if (existingIssue) {
            // 更新现有 Issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `再次失败于 ${new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' })}\n\n${body}`
            });
          } else {
            // 创建新 Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-sync-failure', 'bug']
            });
          }
